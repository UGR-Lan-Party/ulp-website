---
import { darkStyles } from '../utils/all';

interface Props {
  albumId: string;
  userId: string;
  withBackground?: boolean;
  height?: string;
  instanceId?: string;
}

const { 
  albumId, 
  userId, 
  withBackground = true,
  height = "600px",
  instanceId = `carousel-${albumId}`
} = Astro.props;

const containerClass = withBackground 
  ? `bg-gray-1 ${darkStyles} pt-10 pb-8 lg:pt-[120px] lg:pb-[70px]`
  : 'bg-transparent';
---

<section class={containerClass}>
  <div class="container w-full px-4">
    <div class="wow fadeInUp" data-wow-delay=".2s">
      <div class="flex flex-wrap items-center border-solid border-10">
        <div class="w-full px-4">
          <div
            x-data={`imageSlider('${albumId}', '${userId}')`}
            class="relative mx-auto w-full max-w-[90rem] overflow-hidden rounded-lg bg-transparent"
          >
            <div 
              class={`relative rounded-lg overflow-hidden aspect-w-16 aspect-h-9 bg-transparent`} 
              style={`height: ${height}`}
              data-album-id={albumId}
              data-user-id={userId}
              id={instanceId}
            >
              <button
                @click="previous()"
                class="group absolute left-8 top-1/2 z-10 flex h-11 w-11 -translate-y-1/2 items-center justify-center rounded-full bg-gray-100/80 hover:bg-primary shadow-md backdrop-blur-sm"
              >
                <svg
                  class="w-4 h-4 text-gray-800 group-hover:text-white"
                  aria-hidden="true"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 6 10"
                >
                  <path
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M5 1 1 5l4 4"></path>
                </svg>
              </button>

              <button
                @click="forward()"
                class="group absolute right-8 top-1/2 z-10 flex h-11 w-11 -translate-y-1/2 items-center justify-center rounded-full bg-gray-100/80 hover:bg-primary shadow-md backdrop-blur-sm"
              >
                <svg
                  class="w-4 h-4 text-gray-800 group-hover:text-white"
                  aria-hidden="true"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 6 10"
                >
                  <path
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="m1 9 4-4-4-4"></path>
                </svg>
              </button>

              <div class="h-full w-full flex items-center justify-center overflow-hidden">
                <template x-for="(image, index) in images">
                  <div
                    x-show="currentIndex == index + 1"
                    x-transition:enter="transition transform duration-300"
                    x-transition:enter-start="opacity-0"
                    x-transition:enter-end="opacity-100"
                    x-transition:leave="transition transform duration-300"
                    x-transition:leave-start="opacity-100"
                    x-transition:leave-end="opacity-0"
                    class="absolute inset-0 flex items-center justify-center"
                  >
                    <img
                      :src="image"
                      alt="image"
                      class="w-full h-full object-cover cursor-pointer"
                      @click="showModal = true; selectedImage = image"
                    />
                  </div>
                </template>
              </div>
            </div>

            <!-- Thumbnails section -->
            <div class="mt-8 flex gap-4 justify-between w-full">
              <template x-for="i in 5">
                <div
                  x-show="currentIndex + i - 1 <= images.length"
                  class="w-1/5 aspect-video cursor-pointer"
                  @click="currentIndex = currentIndex + i - 1"
                >
                  <img
                    :src="images[currentIndex + i - 2]"
                    alt="thumbnail"
                    class="w-full h-full object-cover rounded-md hover:opacity-75 transition-opacity"
                    :class="{'border-2 border-primary': currentIndex === currentIndex + i - 1}"
                  />
                </div>
              </template>
            </div>

            <!-- Modal para imagen completa -->
            <div
              x-cloak
              x-show="!loading && showModal"
              x-transition.opacity
              class="fixed inset-0 z-[9999] flex items-center justify-center bg-black/50 backdrop-blur-sm p-8"
              @click="showModal = false"
            >
              <div class="relative bg-white rounded-lg p-2 w-[1280px] h-[720px]">
                <img
                  :src="selectedImage"
                  alt="Full size image"
                  class="w-full h-full object-cover rounded-lg"
                  @click.stop
                />
                <button
                  @click="showModal = false"
                  class="absolute -top-4 -right-4 bg-white rounded-full p-2 shadow-lg hover:bg-gray-100"
                >
                  <svg
                    class="w-6 h-6 text-gray-800"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M6 18L18 6M6 6l12 12"
                    ></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"
></script>
<script define:vars={{ albumId, userId }}>
  async function getFlickrPhotos(albumId, userId) {
    const API_KEY = '4f8fd63b2a81e73b7fa5425eb902e2b9';
    const timestamp = new Date().getTime();
    
    console.log(`[Flickr API] Loading album ${albumId} for user ${userId}`);

    const url = `https://www.flickr.com/services/rest/?method=flickr.photosets.getPhotos&api_key=${API_KEY}&photoset_id=${albumId}&user_id=${userId}&format=json&nojsoncallback=1&extras=url_k,o_dims&timestamp=${timestamp}`;

    try {
      const response = await fetch(url);
      const data = await response.json();
      console.log(`[Flickr API] Response for album ${albumId}:`, data);
      return data.photoset.photo
        .filter(photo => photo.width_k > photo.height_k)
        .map(photo => photo.url_k)
        .filter(url => url);
    } catch (error) {
      console.error(`[Flickr API] Error fetching photos for album ${albumId}:`, error);
      return [];
    }
  }

  document.addEventListener('alpine:init', () => {
    Alpine.data('imageSlider', (albumId, userId) => ({
      currentIndex: 1,
      images: [],
      loading: true,
      showModal: false,
      selectedImage: null,
      albumId,
      userId,

      async init() {
        console.log(`[Alpine] Initializing slider for album ${this.albumId}`);
        this.loading = true;
        this.images = await getFlickrPhotos(this.albumId, this.userId);
        this.loading = false;
        console.log(`[Alpine] Loaded ${this.images.length} images for album ${this.albumId}`);
      },
      previous() {
        if (this.currentIndex > 1) {
          this.currentIndex = this.currentIndex - 1;
        }
      },
      forward() {
        if (this.currentIndex < this.images.length) {
          this.currentIndex = this.currentIndex + 1;
        }
      },
    }));
  });
</script>

<style>
  [x-cloak] {
    display: none !important;
  }
</style>
